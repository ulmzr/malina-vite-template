var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  rollupPlugin: () => rollupPlugin,
  unplugin: () => unplugin,
  vitePlugin: () => vitePlugin,
  webpackPlugin: () => webpackPlugin
});
var import_unplugin = __toModule(require("unplugin"));
var import_malinajs = __toModule(require("malinajs"));
var import_picomatch = __toModule(require("picomatch"));
var unplugin = (0, import_unplugin.createUnplugin)((options) => {
  if (!options)
    options = {};
  if (!options.extensions)
    options.extensions = ["ma", "xht"];
  if (options.displayVersion)
    console.log("! Malina.js", import_malinajs.default.version);
  const cssMap = new Map();
  return {
    name: "malinajs",
    transformInclude(id) {
      const extensionMatches = options.extensions.some((extension) => id.endsWith("." + extension));
      if (!(options == null ? void 0 : options.include) && !(options == null ? void 0 : options.exclude)) {
        return extensionMatches;
      }
      const globMatches = import_picomatch.default.isMatch(id, options.include || [], {
        cwd: process.cwd(),
        ignore: options.exclude || [],
        contains: true
      });
      return globMatches || extensionMatches;
    },
    async transform(code, id) {
      var _a;
      const compileOptions = __spreadProps(__spreadValues({}, options), {
        path: id,
        name: id.match(/([^/\\]+)\.\w+$/)[1]
      });
      try {
        const ctx = await import_malinajs.default.compile(code, compileOptions);
        let result = ctx.result;
        if ((_a = ctx == null ? void 0 : ctx.css) == null ? void 0 : _a.result) {
          const name = id.replace(/[^\w.\\-]/g, "").replace(/(\.\w+)+/, "") + ".malina.css";
          cssMap.set(name, ctx.css.result);
          result += `
import "${name}";
`;
        }
        return result;
      } catch (error) {
        if (options == null ? void 0 : options.warning) {
          if (typeof error === "string") {
            options.warning(error);
          } else if (error instanceof Error) {
            options.warning(error.message);
          }
        }
        throw error;
      }
    },
    resolveId(name) {
      if (cssMap.has(name))
        return name;
      return null;
    },
    load(id) {
      return cssMap.has(id) ? cssMap.get(id) : null;
    }
  };
});
var vitePlugin = unplugin.vite;
var rollupPlugin = unplugin.rollup;
var webpackPlugin = unplugin.webpack;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  rollupPlugin,
  unplugin,
  vitePlugin,
  webpackPlugin
});
